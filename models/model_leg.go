/*
Webull API

Webull API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Leg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Leg{}

// Leg struct for Leg
type Leg struct {
	Action *OrderSide `json:"action,omitempty"`
	Amount *string `json:"amount,omitempty"`
	Expiration *string `json:"expiration,omitempty"`
	FilledQuantity *string `json:"filled_quantity,omitempty"`
	FilledTime *string `json:"filled_time,omitempty"`
	Price *string `json:"price,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	Side *string `json:"side,omitempty"`
	Strategy *string `json:"strategy,omitempty"`
	Strike *string `json:"strike,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewLeg instantiates a new Leg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeg() *Leg {
	this := Leg{}
	return &this
}

// NewLegWithDefaults instantiates a new Leg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegWithDefaults() *Leg {
	this := Leg{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Leg) GetAction() OrderSide {
	if o == nil || IsNil(o.Action) {
		var ret OrderSide
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetActionOk() (*OrderSide, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Leg) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given OrderSide and assigns it to the Action field.
func (o *Leg) SetAction(v OrderSide) {
	o.Action = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Leg) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Leg) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *Leg) SetAmount(v string) {
	o.Amount = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *Leg) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *Leg) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *Leg) SetExpiration(v string) {
	o.Expiration = &v
}

// GetFilledQuantity returns the FilledQuantity field value if set, zero value otherwise.
func (o *Leg) GetFilledQuantity() string {
	if o == nil || IsNil(o.FilledQuantity) {
		var ret string
		return ret
	}
	return *o.FilledQuantity
}

// GetFilledQuantityOk returns a tuple with the FilledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetFilledQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.FilledQuantity) {
		return nil, false
	}
	return o.FilledQuantity, true
}

// HasFilledQuantity returns a boolean if a field has been set.
func (o *Leg) HasFilledQuantity() bool {
	if o != nil && !IsNil(o.FilledQuantity) {
		return true
	}

	return false
}

// SetFilledQuantity gets a reference to the given string and assigns it to the FilledQuantity field.
func (o *Leg) SetFilledQuantity(v string) {
	o.FilledQuantity = &v
}

// GetFilledTime returns the FilledTime field value if set, zero value otherwise.
func (o *Leg) GetFilledTime() string {
	if o == nil || IsNil(o.FilledTime) {
		var ret string
		return ret
	}
	return *o.FilledTime
}

// GetFilledTimeOk returns a tuple with the FilledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetFilledTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FilledTime) {
		return nil, false
	}
	return o.FilledTime, true
}

// HasFilledTime returns a boolean if a field has been set.
func (o *Leg) HasFilledTime() bool {
	if o != nil && !IsNil(o.FilledTime) {
		return true
	}

	return false
}

// SetFilledTime gets a reference to the given string and assigns it to the FilledTime field.
func (o *Leg) SetFilledTime(v string) {
	o.FilledTime = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Leg) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Leg) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *Leg) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Leg) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Leg) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *Leg) SetQuantity(v string) {
	o.Quantity = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Leg) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Leg) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *Leg) SetSide(v string) {
	o.Side = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *Leg) GetStrategy() string {
	if o == nil || IsNil(o.Strategy) {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *Leg) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *Leg) SetStrategy(v string) {
	o.Strategy = &v
}

// GetStrike returns the Strike field value if set, zero value otherwise.
func (o *Leg) GetStrike() string {
	if o == nil || IsNil(o.Strike) {
		var ret string
		return ret
	}
	return *o.Strike
}

// GetStrikeOk returns a tuple with the Strike field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetStrikeOk() (*string, bool) {
	if o == nil || IsNil(o.Strike) {
		return nil, false
	}
	return o.Strike, true
}

// HasStrike returns a boolean if a field has been set.
func (o *Leg) HasStrike() bool {
	if o != nil && !IsNil(o.Strike) {
		return true
	}

	return false
}

// SetStrike gets a reference to the given string and assigns it to the Strike field.
func (o *Leg) SetStrike(v string) {
	o.Strike = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Leg) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Leg) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Leg) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *Leg) GetTicker() string {
	if o == nil || IsNil(o.Ticker) {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetTickerOk() (*string, bool) {
	if o == nil || IsNil(o.Ticker) {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *Leg) HasTicker() bool {
	if o != nil && !IsNil(o.Ticker) {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *Leg) SetTicker(v string) {
	o.Ticker = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Leg) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Leg) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Leg) SetType(v string) {
	o.Type = &v
}

func (o Leg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Leg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.FilledQuantity) {
		toSerialize["filled_quantity"] = o.FilledQuantity
	}
	if !IsNil(o.FilledTime) {
		toSerialize["filled_time"] = o.FilledTime
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.Strike) {
		toSerialize["strike"] = o.Strike
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Ticker) {
		toSerialize["ticker"] = o.Ticker
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableLeg struct {
	value *Leg
	isSet bool
}

func (v NullableLeg) Get() *Leg {
	return v.value
}

func (v *NullableLeg) Set(val *Leg) {
	v.value = val
	v.isSet = true
}

func (v NullableLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeg(val *Leg) *NullableLeg {
	return &NullableLeg{value: val, isSet: true}
}

func (v NullableLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Webull API

Webull API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OptionDirection the model 'OptionDirection'
type OptionDirection string

// List of OptionDirection
const (
	ALL OptionDirection = "all"
	CALLS OptionDirection = "calls"
	PUTS OptionDirection = "puts"
)

// All allowed values of OptionDirection enum
var AllowedOptionDirectionEnumValues = []OptionDirection{
	"all",
	"calls",
	"puts",
}

func (v *OptionDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptionDirection(value)
	for _, existing := range AllowedOptionDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptionDirection", value)
}

// NewOptionDirectionFromValue returns a pointer to a valid OptionDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptionDirectionFromValue(v string) (*OptionDirection, error) {
	ev := OptionDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptionDirection: valid values are %v", v, AllowedOptionDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptionDirection) IsValid() bool {
	for _, existing := range AllowedOptionDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptionDirection value
func (v OptionDirection) Ptr() *OptionDirection {
	return &v
}

type NullableOptionDirection struct {
	value *OptionDirection
	isSet bool
}

func (v NullableOptionDirection) Get() *OptionDirection {
	return v.value
}

func (v *NullableOptionDirection) Set(val *OptionDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionDirection(val *OptionDirection) *NullableOptionDirection {
	return &NullableOptionDirection{value: val, isSet: true}
}

func (v NullableOptionDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Webull API

Webull API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Auth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Auth{}

// Auth struct for Auth
type Auth struct {
	MFA *string `json:"MFA,omitempty"`
	AccessToken *string `json:"access_token,omitempty"`
	DeviceId *string `json:"deviceId,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
	TokenExpireTime *string `json:"token_expire_time,omitempty"`
	Username *string `json:"username,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewAuth instantiates a new Auth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth() *Auth {
	this := Auth{}
	return &this
}

// NewAuthWithDefaults instantiates a new Auth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthWithDefaults() *Auth {
	this := Auth{}
	return &this
}

// GetMFA returns the MFA field value if set, zero value otherwise.
func (o *Auth) GetMFA() string {
	if o == nil || IsNil(o.MFA) {
		var ret string
		return ret
	}
	return *o.MFA
}

// GetMFAOk returns a tuple with the MFA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetMFAOk() (*string, bool) {
	if o == nil || IsNil(o.MFA) {
		return nil, false
	}
	return o.MFA, true
}

// HasMFA returns a boolean if a field has been set.
func (o *Auth) HasMFA() bool {
	if o != nil && !IsNil(o.MFA) {
		return true
	}

	return false
}

// SetMFA gets a reference to the given string and assigns it to the MFA field.
func (o *Auth) SetMFA(v string) {
	o.MFA = &v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *Auth) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *Auth) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *Auth) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *Auth) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *Auth) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *Auth) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *Auth) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *Auth) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *Auth) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetTokenExpireTime returns the TokenExpireTime field value if set, zero value otherwise.
func (o *Auth) GetTokenExpireTime() string {
	if o == nil || IsNil(o.TokenExpireTime) {
		var ret string
		return ret
	}
	return *o.TokenExpireTime
}

// GetTokenExpireTimeOk returns a tuple with the TokenExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetTokenExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TokenExpireTime) {
		return nil, false
	}
	return o.TokenExpireTime, true
}

// HasTokenExpireTime returns a boolean if a field has been set.
func (o *Auth) HasTokenExpireTime() bool {
	if o != nil && !IsNil(o.TokenExpireTime) {
		return true
	}

	return false
}

// SetTokenExpireTime gets a reference to the given string and assigns it to the TokenExpireTime field.
func (o *Auth) SetTokenExpireTime(v string) {
	o.TokenExpireTime = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Auth) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Auth) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Auth) SetUsername(v string) {
	o.Username = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Auth) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Auth) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Auth) SetUuid(v string) {
	o.Uuid = &v
}

func (o Auth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Auth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MFA) {
		toSerialize["MFA"] = o.MFA
	}
	if !IsNil(o.AccessToken) {
		toSerialize["access_token"] = o.AccessToken
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !IsNil(o.TokenExpireTime) {
		toSerialize["token_expire_time"] = o.TokenExpireTime
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableAuth struct {
	value *Auth
	isSet bool
}

func (v NullableAuth) Get() *Auth {
	return v.value
}

func (v *NullableAuth) Set(val *Auth) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth(val *Auth) *NullableAuth {
	return &NullableAuth{value: val, isSet: true}
}

func (v NullableAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



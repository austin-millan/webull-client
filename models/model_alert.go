/*
Webull API

Webull API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Alert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alert{}

// Alert struct for Alert
type Alert struct {
	EventWarning *AlertEventWarning `json:"eventWarning,omitempty"`
	TickerWarning *AlertTickerWarning `json:"tickerWarning,omitempty"`
	WarningInput map[string]interface{} `json:"warningInput,omitempty"`
}

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert() *Alert {
	this := Alert{}
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetEventWarning returns the EventWarning field value if set, zero value otherwise.
func (o *Alert) GetEventWarning() AlertEventWarning {
	if o == nil || IsNil(o.EventWarning) {
		var ret AlertEventWarning
		return ret
	}
	return *o.EventWarning
}

// GetEventWarningOk returns a tuple with the EventWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetEventWarningOk() (*AlertEventWarning, bool) {
	if o == nil || IsNil(o.EventWarning) {
		return nil, false
	}
	return o.EventWarning, true
}

// HasEventWarning returns a boolean if a field has been set.
func (o *Alert) HasEventWarning() bool {
	if o != nil && !IsNil(o.EventWarning) {
		return true
	}

	return false
}

// SetEventWarning gets a reference to the given AlertEventWarning and assigns it to the EventWarning field.
func (o *Alert) SetEventWarning(v AlertEventWarning) {
	o.EventWarning = &v
}

// GetTickerWarning returns the TickerWarning field value if set, zero value otherwise.
func (o *Alert) GetTickerWarning() AlertTickerWarning {
	if o == nil || IsNil(o.TickerWarning) {
		var ret AlertTickerWarning
		return ret
	}
	return *o.TickerWarning
}

// GetTickerWarningOk returns a tuple with the TickerWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetTickerWarningOk() (*AlertTickerWarning, bool) {
	if o == nil || IsNil(o.TickerWarning) {
		return nil, false
	}
	return o.TickerWarning, true
}

// HasTickerWarning returns a boolean if a field has been set.
func (o *Alert) HasTickerWarning() bool {
	if o != nil && !IsNil(o.TickerWarning) {
		return true
	}

	return false
}

// SetTickerWarning gets a reference to the given AlertTickerWarning and assigns it to the TickerWarning field.
func (o *Alert) SetTickerWarning(v AlertTickerWarning) {
	o.TickerWarning = &v
}

// GetWarningInput returns the WarningInput field value if set, zero value otherwise.
func (o *Alert) GetWarningInput() map[string]interface{} {
	if o == nil || IsNil(o.WarningInput) {
		var ret map[string]interface{}
		return ret
	}
	return o.WarningInput
}

// GetWarningInputOk returns a tuple with the WarningInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetWarningInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.WarningInput) {
		return map[string]interface{}{}, false
	}
	return o.WarningInput, true
}

// HasWarningInput returns a boolean if a field has been set.
func (o *Alert) HasWarningInput() bool {
	if o != nil && !IsNil(o.WarningInput) {
		return true
	}

	return false
}

// SetWarningInput gets a reference to the given map[string]interface{} and assigns it to the WarningInput field.
func (o *Alert) SetWarningInput(v map[string]interface{}) {
	o.WarningInput = v
}

func (o Alert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventWarning) {
		toSerialize["eventWarning"] = o.EventWarning
	}
	if !IsNil(o.TickerWarning) {
		toSerialize["tickerWarning"] = o.TickerWarning
	}
	if !IsNil(o.WarningInput) {
		toSerialize["warningInput"] = o.WarningInput
	}
	return toSerialize, nil
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



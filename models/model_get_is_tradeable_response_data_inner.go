/*
Webull API

Webull API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetIsTradeableResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIsTradeableResponseDataInner{}

// GetIsTradeableResponseDataInner struct for GetIsTradeableResponseDataInner
type GetIsTradeableResponseDataInner struct {
	BrokerId *int32 `json:"brokerId,omitempty"`
	CurrencyCode *string `json:"currencyCode,omitempty"`
	CurrencyId *int32 `json:"currencyId,omitempty"`
	DisExchangeCode *string `json:"disExchangeCode,omitempty"`
	DisSymbol *string `json:"disSymbol,omitempty"`
	ExchangeCode *string `json:"exchangeCode,omitempty"`
	ExchangeId *int32 `json:"exchangeId,omitempty"`
	ExchangeTrade *bool `json:"exchangeTrade,omitempty"`
	ExtType []map[string]interface{} `json:"extType,omitempty"`
	ListStatus *int32 `json:"listStatus,omitempty"`
	Name *string `json:"name,omitempty"`
	RegionId *int32 `json:"regionId,omitempty"`
	RegionIsoCode *string `json:"regionIsoCode,omitempty"`
	RegionName *string `json:"regionName,omitempty"`
	SecType []int32 `json:"secType,omitempty"`
	ShowCode *string `json:"showCode,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TickerId *int32 `json:"tickerId,omitempty"`
	TickerName *string `json:"tickerName,omitempty"`
	TickerType *int32 `json:"tickerType,omitempty"`
	TinyName *string `json:"tinyName,omitempty"`
	Type *int32 `json:"type,omitempty"`
	Types *string `json:"types,omitempty"`
}

// NewGetIsTradeableResponseDataInner instantiates a new GetIsTradeableResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIsTradeableResponseDataInner() *GetIsTradeableResponseDataInner {
	this := GetIsTradeableResponseDataInner{}
	return &this
}

// NewGetIsTradeableResponseDataInnerWithDefaults instantiates a new GetIsTradeableResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIsTradeableResponseDataInnerWithDefaults() *GetIsTradeableResponseDataInner {
	this := GetIsTradeableResponseDataInner{}
	return &this
}

// GetBrokerId returns the BrokerId field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetBrokerId() int32 {
	if o == nil || IsNil(o.BrokerId) {
		var ret int32
		return ret
	}
	return *o.BrokerId
}

// GetBrokerIdOk returns a tuple with the BrokerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetBrokerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.BrokerId) {
		return nil, false
	}
	return o.BrokerId, true
}

// HasBrokerId returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasBrokerId() bool {
	if o != nil && !IsNil(o.BrokerId) {
		return true
	}

	return false
}

// SetBrokerId gets a reference to the given int32 and assigns it to the BrokerId field.
func (o *GetIsTradeableResponseDataInner) SetBrokerId(v int32) {
	o.BrokerId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *GetIsTradeableResponseDataInner) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetCurrencyId() int32 {
	if o == nil || IsNil(o.CurrencyId) {
		var ret int32
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetCurrencyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given int32 and assigns it to the CurrencyId field.
func (o *GetIsTradeableResponseDataInner) SetCurrencyId(v int32) {
	o.CurrencyId = &v
}

// GetDisExchangeCode returns the DisExchangeCode field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetDisExchangeCode() string {
	if o == nil || IsNil(o.DisExchangeCode) {
		var ret string
		return ret
	}
	return *o.DisExchangeCode
}

// GetDisExchangeCodeOk returns a tuple with the DisExchangeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetDisExchangeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DisExchangeCode) {
		return nil, false
	}
	return o.DisExchangeCode, true
}

// HasDisExchangeCode returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasDisExchangeCode() bool {
	if o != nil && !IsNil(o.DisExchangeCode) {
		return true
	}

	return false
}

// SetDisExchangeCode gets a reference to the given string and assigns it to the DisExchangeCode field.
func (o *GetIsTradeableResponseDataInner) SetDisExchangeCode(v string) {
	o.DisExchangeCode = &v
}

// GetDisSymbol returns the DisSymbol field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetDisSymbol() string {
	if o == nil || IsNil(o.DisSymbol) {
		var ret string
		return ret
	}
	return *o.DisSymbol
}

// GetDisSymbolOk returns a tuple with the DisSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetDisSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.DisSymbol) {
		return nil, false
	}
	return o.DisSymbol, true
}

// HasDisSymbol returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasDisSymbol() bool {
	if o != nil && !IsNil(o.DisSymbol) {
		return true
	}

	return false
}

// SetDisSymbol gets a reference to the given string and assigns it to the DisSymbol field.
func (o *GetIsTradeableResponseDataInner) SetDisSymbol(v string) {
	o.DisSymbol = &v
}

// GetExchangeCode returns the ExchangeCode field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetExchangeCode() string {
	if o == nil || IsNil(o.ExchangeCode) {
		var ret string
		return ret
	}
	return *o.ExchangeCode
}

// GetExchangeCodeOk returns a tuple with the ExchangeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetExchangeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeCode) {
		return nil, false
	}
	return o.ExchangeCode, true
}

// HasExchangeCode returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasExchangeCode() bool {
	if o != nil && !IsNil(o.ExchangeCode) {
		return true
	}

	return false
}

// SetExchangeCode gets a reference to the given string and assigns it to the ExchangeCode field.
func (o *GetIsTradeableResponseDataInner) SetExchangeCode(v string) {
	o.ExchangeCode = &v
}

// GetExchangeId returns the ExchangeId field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetExchangeId() int32 {
	if o == nil || IsNil(o.ExchangeId) {
		var ret int32
		return ret
	}
	return *o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetExchangeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExchangeId) {
		return nil, false
	}
	return o.ExchangeId, true
}

// HasExchangeId returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasExchangeId() bool {
	if o != nil && !IsNil(o.ExchangeId) {
		return true
	}

	return false
}

// SetExchangeId gets a reference to the given int32 and assigns it to the ExchangeId field.
func (o *GetIsTradeableResponseDataInner) SetExchangeId(v int32) {
	o.ExchangeId = &v
}

// GetExchangeTrade returns the ExchangeTrade field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetExchangeTrade() bool {
	if o == nil || IsNil(o.ExchangeTrade) {
		var ret bool
		return ret
	}
	return *o.ExchangeTrade
}

// GetExchangeTradeOk returns a tuple with the ExchangeTrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetExchangeTradeOk() (*bool, bool) {
	if o == nil || IsNil(o.ExchangeTrade) {
		return nil, false
	}
	return o.ExchangeTrade, true
}

// HasExchangeTrade returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasExchangeTrade() bool {
	if o != nil && !IsNil(o.ExchangeTrade) {
		return true
	}

	return false
}

// SetExchangeTrade gets a reference to the given bool and assigns it to the ExchangeTrade field.
func (o *GetIsTradeableResponseDataInner) SetExchangeTrade(v bool) {
	o.ExchangeTrade = &v
}

// GetExtType returns the ExtType field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetExtType() []map[string]interface{} {
	if o == nil || IsNil(o.ExtType) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ExtType
}

// GetExtTypeOk returns a tuple with the ExtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetExtTypeOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtType) {
		return nil, false
	}
	return o.ExtType, true
}

// HasExtType returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasExtType() bool {
	if o != nil && !IsNil(o.ExtType) {
		return true
	}

	return false
}

// SetExtType gets a reference to the given []map[string]interface{} and assigns it to the ExtType field.
func (o *GetIsTradeableResponseDataInner) SetExtType(v []map[string]interface{}) {
	o.ExtType = v
}

// GetListStatus returns the ListStatus field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetListStatus() int32 {
	if o == nil || IsNil(o.ListStatus) {
		var ret int32
		return ret
	}
	return *o.ListStatus
}

// GetListStatusOk returns a tuple with the ListStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetListStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.ListStatus) {
		return nil, false
	}
	return o.ListStatus, true
}

// HasListStatus returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasListStatus() bool {
	if o != nil && !IsNil(o.ListStatus) {
		return true
	}

	return false
}

// SetListStatus gets a reference to the given int32 and assigns it to the ListStatus field.
func (o *GetIsTradeableResponseDataInner) SetListStatus(v int32) {
	o.ListStatus = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetIsTradeableResponseDataInner) SetName(v string) {
	o.Name = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetRegionId() int32 {
	if o == nil || IsNil(o.RegionId) {
		var ret int32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given int32 and assigns it to the RegionId field.
func (o *GetIsTradeableResponseDataInner) SetRegionId(v int32) {
	o.RegionId = &v
}

// GetRegionIsoCode returns the RegionIsoCode field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetRegionIsoCode() string {
	if o == nil || IsNil(o.RegionIsoCode) {
		var ret string
		return ret
	}
	return *o.RegionIsoCode
}

// GetRegionIsoCodeOk returns a tuple with the RegionIsoCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetRegionIsoCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionIsoCode) {
		return nil, false
	}
	return o.RegionIsoCode, true
}

// HasRegionIsoCode returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasRegionIsoCode() bool {
	if o != nil && !IsNil(o.RegionIsoCode) {
		return true
	}

	return false
}

// SetRegionIsoCode gets a reference to the given string and assigns it to the RegionIsoCode field.
func (o *GetIsTradeableResponseDataInner) SetRegionIsoCode(v string) {
	o.RegionIsoCode = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *GetIsTradeableResponseDataInner) SetRegionName(v string) {
	o.RegionName = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetSecType() []int32 {
	if o == nil || IsNil(o.SecType) {
		var ret []int32
		return ret
	}
	return o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetSecTypeOk() ([]int32, bool) {
	if o == nil || IsNil(o.SecType) {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasSecType() bool {
	if o != nil && !IsNil(o.SecType) {
		return true
	}

	return false
}

// SetSecType gets a reference to the given []int32 and assigns it to the SecType field.
func (o *GetIsTradeableResponseDataInner) SetSecType(v []int32) {
	o.SecType = v
}

// GetShowCode returns the ShowCode field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetShowCode() string {
	if o == nil || IsNil(o.ShowCode) {
		var ret string
		return ret
	}
	return *o.ShowCode
}

// GetShowCodeOk returns a tuple with the ShowCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetShowCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ShowCode) {
		return nil, false
	}
	return o.ShowCode, true
}

// HasShowCode returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasShowCode() bool {
	if o != nil && !IsNil(o.ShowCode) {
		return true
	}

	return false
}

// SetShowCode gets a reference to the given string and assigns it to the ShowCode field.
func (o *GetIsTradeableResponseDataInner) SetShowCode(v string) {
	o.ShowCode = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *GetIsTradeableResponseDataInner) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTickerId returns the TickerId field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetTickerId() int32 {
	if o == nil || IsNil(o.TickerId) {
		var ret int32
		return ret
	}
	return *o.TickerId
}

// GetTickerIdOk returns a tuple with the TickerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetTickerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TickerId) {
		return nil, false
	}
	return o.TickerId, true
}

// HasTickerId returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasTickerId() bool {
	if o != nil && !IsNil(o.TickerId) {
		return true
	}

	return false
}

// SetTickerId gets a reference to the given int32 and assigns it to the TickerId field.
func (o *GetIsTradeableResponseDataInner) SetTickerId(v int32) {
	o.TickerId = &v
}

// GetTickerName returns the TickerName field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetTickerName() string {
	if o == nil || IsNil(o.TickerName) {
		var ret string
		return ret
	}
	return *o.TickerName
}

// GetTickerNameOk returns a tuple with the TickerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetTickerNameOk() (*string, bool) {
	if o == nil || IsNil(o.TickerName) {
		return nil, false
	}
	return o.TickerName, true
}

// HasTickerName returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasTickerName() bool {
	if o != nil && !IsNil(o.TickerName) {
		return true
	}

	return false
}

// SetTickerName gets a reference to the given string and assigns it to the TickerName field.
func (o *GetIsTradeableResponseDataInner) SetTickerName(v string) {
	o.TickerName = &v
}

// GetTickerType returns the TickerType field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetTickerType() int32 {
	if o == nil || IsNil(o.TickerType) {
		var ret int32
		return ret
	}
	return *o.TickerType
}

// GetTickerTypeOk returns a tuple with the TickerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetTickerTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.TickerType) {
		return nil, false
	}
	return o.TickerType, true
}

// HasTickerType returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasTickerType() bool {
	if o != nil && !IsNil(o.TickerType) {
		return true
	}

	return false
}

// SetTickerType gets a reference to the given int32 and assigns it to the TickerType field.
func (o *GetIsTradeableResponseDataInner) SetTickerType(v int32) {
	o.TickerType = &v
}

// GetTinyName returns the TinyName field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetTinyName() string {
	if o == nil || IsNil(o.TinyName) {
		var ret string
		return ret
	}
	return *o.TinyName
}

// GetTinyNameOk returns a tuple with the TinyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetTinyNameOk() (*string, bool) {
	if o == nil || IsNil(o.TinyName) {
		return nil, false
	}
	return o.TinyName, true
}

// HasTinyName returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasTinyName() bool {
	if o != nil && !IsNil(o.TinyName) {
		return true
	}

	return false
}

// SetTinyName gets a reference to the given string and assigns it to the TinyName field.
func (o *GetIsTradeableResponseDataInner) SetTinyName(v string) {
	o.TinyName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *GetIsTradeableResponseDataInner) SetType(v int32) {
	o.Type = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *GetIsTradeableResponseDataInner) GetTypes() string {
	if o == nil || IsNil(o.Types) {
		var ret string
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIsTradeableResponseDataInner) GetTypesOk() (*string, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *GetIsTradeableResponseDataInner) HasTypes() bool {
	if o != nil && !IsNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given string and assigns it to the Types field.
func (o *GetIsTradeableResponseDataInner) SetTypes(v string) {
	o.Types = &v
}

func (o GetIsTradeableResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIsTradeableResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrokerId) {
		toSerialize["brokerId"] = o.BrokerId
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currencyId"] = o.CurrencyId
	}
	if !IsNil(o.DisExchangeCode) {
		toSerialize["disExchangeCode"] = o.DisExchangeCode
	}
	if !IsNil(o.DisSymbol) {
		toSerialize["disSymbol"] = o.DisSymbol
	}
	if !IsNil(o.ExchangeCode) {
		toSerialize["exchangeCode"] = o.ExchangeCode
	}
	if !IsNil(o.ExchangeId) {
		toSerialize["exchangeId"] = o.ExchangeId
	}
	if !IsNil(o.ExchangeTrade) {
		toSerialize["exchangeTrade"] = o.ExchangeTrade
	}
	if !IsNil(o.ExtType) {
		toSerialize["extType"] = o.ExtType
	}
	if !IsNil(o.ListStatus) {
		toSerialize["listStatus"] = o.ListStatus
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RegionId) {
		toSerialize["regionId"] = o.RegionId
	}
	if !IsNil(o.RegionIsoCode) {
		toSerialize["regionIsoCode"] = o.RegionIsoCode
	}
	if !IsNil(o.RegionName) {
		toSerialize["regionName"] = o.RegionName
	}
	if !IsNil(o.SecType) {
		toSerialize["secType"] = o.SecType
	}
	if !IsNil(o.ShowCode) {
		toSerialize["showCode"] = o.ShowCode
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.TickerId) {
		toSerialize["tickerId"] = o.TickerId
	}
	if !IsNil(o.TickerName) {
		toSerialize["tickerName"] = o.TickerName
	}
	if !IsNil(o.TickerType) {
		toSerialize["tickerType"] = o.TickerType
	}
	if !IsNil(o.TinyName) {
		toSerialize["tinyName"] = o.TinyName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Types) {
		toSerialize["types"] = o.Types
	}
	return toSerialize, nil
}

type NullableGetIsTradeableResponseDataInner struct {
	value *GetIsTradeableResponseDataInner
	isSet bool
}

func (v NullableGetIsTradeableResponseDataInner) Get() *GetIsTradeableResponseDataInner {
	return v.value
}

func (v *NullableGetIsTradeableResponseDataInner) Set(val *GetIsTradeableResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIsTradeableResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIsTradeableResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIsTradeableResponseDataInner(val *GetIsTradeableResponseDataInner) *NullableGetIsTradeableResponseDataInner {
	return &NullableGetIsTradeableResponseDataInner{value: val, isSet: true}
}

func (v NullableGetIsTradeableResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIsTradeableResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



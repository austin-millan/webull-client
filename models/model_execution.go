/*
Webull API

Webull API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Execution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Execution{}

// Execution struct for Execution
type Execution struct {
	Id *string `json:"id,omitempty"`
	Price *string `json:"price,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	SettlementDate *string `json:"settlement_date,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewExecution instantiates a new Execution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecution() *Execution {
	this := Execution{}
	return &this
}

// NewExecutionWithDefaults instantiates a new Execution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionWithDefaults() *Execution {
	this := Execution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Execution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Execution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Execution) SetId(v string) {
	o.Id = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Execution) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Execution) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *Execution) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Execution) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Execution) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *Execution) SetQuantity(v string) {
	o.Quantity = &v
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise.
func (o *Execution) GetSettlementDate() string {
	if o == nil || IsNil(o.SettlementDate) {
		var ret string
		return ret
	}
	return *o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetSettlementDateOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementDate) {
		return nil, false
	}
	return o.SettlementDate, true
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *Execution) HasSettlementDate() bool {
	if o != nil && !IsNil(o.SettlementDate) {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given string and assigns it to the SettlementDate field.
func (o *Execution) SetSettlementDate(v string) {
	o.SettlementDate = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Execution) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Execution) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *Execution) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o Execution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Execution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.SettlementDate) {
		toSerialize["settlement_date"] = o.SettlementDate
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableExecution struct {
	value *Execution
	isSet bool
}

func (v NullableExecution) Get() *Execution {
	return v.value
}

func (v *NullableExecution) Set(val *Execution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecution(val *Execution) *NullableExecution {
	return &NullableExecution{value: val, isSet: true}
}

func (v NullableExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



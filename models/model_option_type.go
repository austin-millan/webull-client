/*
Webull API

Webull API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OptionType the model 'OptionType'
type OptionType string

// List of OptionType
const (
	PUT OptionType = "put"
	CALL OptionType = "call"
)

// All allowed values of OptionType enum
var AllowedOptionTypeEnumValues = []OptionType{
	"put",
	"call",
}

func (v *OptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptionType(value)
	for _, existing := range AllowedOptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptionType", value)
}

// NewOptionTypeFromValue returns a pointer to a valid OptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptionTypeFromValue(v string) (*OptionType, error) {
	ev := OptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptionType: valid values are %v", v, AllowedOptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptionType) IsValid() bool {
	for _, existing := range AllowedOptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptionType value
func (v OptionType) Ptr() *OptionType {
	return &v
}

type NullableOptionType struct {
	value *OptionType
	isSet bool
}

func (v NullableOptionType) Get() *OptionType {
	return v.value
}

func (v *NullableOptionType) Set(val *OptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionType(val *OptionType) *NullableOptionType {
	return &NullableOptionType{value: val, isSet: true}
}

func (v NullableOptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

